// Automatically generated by MockGen. DO NOT EDIT!
// Source: http_client.go

package serviceclient

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of BackendAdapter interface
type MockBackendAdapter struct {
	ctrl     *gomock.Controller
	recorder *_MockBackendAdapterRecorder
}

// Recorder for MockBackendAdapter (not exported)
type _MockBackendAdapterRecorder struct {
	mock *MockBackendAdapter
}

func NewMockBackendAdapter(ctrl *gomock.Controller) *MockBackendAdapter {
	mock := &MockBackendAdapter{ctrl: ctrl}
	mock.recorder = &_MockBackendAdapterRecorder{mock}
	return mock
}

func (_m *MockBackendAdapter) EXPECT() *_MockBackendAdapterRecorder {
	return _m.recorder
}

func (_m *MockBackendAdapter) Resolve(name string) (string, error) {
	ret := _m.ctrl.Call(_m, "Resolve", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBackendAdapterRecorder) Resolve(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resolve", arg0)
}

func (_m *MockBackendAdapter) Configure(services ...string) error {
	_s := []interface{}{}
	for _, _x := range services {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Configure", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBackendAdapterRecorder) Configure(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Configure", arg0...)
}

func (_m *MockBackendAdapter) Refresh() error {
	ret := _m.ctrl.Call(_m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBackendAdapterRecorder) Refresh() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Refresh")
}
