// Automatically generated by MockGen. DO NOT EDIT!
// Source: service_client.go

package servicemocks

import (
	io "io"
	http "net/http"

	gomock "github.com/golang/mock/gomock"
)

// Mock of ServiceCaller interface
type MockServiceCaller struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceCallerRecorder
}

// Recorder for MockServiceCaller (not exported)
type _MockServiceCallerRecorder struct {
	mock *MockServiceCaller
}

func NewMockServiceCaller(ctrl *gomock.Controller) *MockServiceCaller {
	mock := &MockServiceCaller{ctrl: ctrl}
	mock.recorder = &_MockServiceCallerRecorder{mock}
	return mock
}

func (_m *MockServiceCaller) EXPECT() *_MockServiceCallerRecorder {
	return _m.recorder
}

func (_m *MockServiceCaller) Get(path string, headers ...string) (*http.Response, error) {
	_s := []interface{}{path}
	for _, _x := range headers {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Get", _s...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceCallerRecorder) Get(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", _s...)
}

func (_m *MockServiceCaller) GetSecure(path string, headers ...string) (*http.Response, error) {
	_s := []interface{}{path}
	for _, _x := range headers {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetSecure", _s...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceCallerRecorder) GetSecure(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSecure", _s...)
}

func (_m *MockServiceCaller) Delete(path string, headers ...string) (*http.Response, error) {
	_s := []interface{}{path}
	for _, _x := range headers {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Delete", _s...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceCallerRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", _s...)
}

func (_m *MockServiceCaller) DeleteSecure(path string, headers ...string) (*http.Response, error) {
	_s := []interface{}{path}
	for _, _x := range headers {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteSecure", _s...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceCallerRecorder) DeleteSecure(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSecure", _s...)
}

func (_m *MockServiceCaller) Post(path string, bodyType string, body io.Reader, headers ...string) (*http.Response, error) {
	_s := []interface{}{path, bodyType, body}
	for _, _x := range headers {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Post", _s...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceCallerRecorder) Post(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Post", _s...)
}

func (_m *MockServiceCaller) PostSecure(path string, bodyType string, body io.Reader, headers ...string) (*http.Response, error) {
	_s := []interface{}{path, bodyType, body}
	for _, _x := range headers {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PostSecure", _s...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceCallerRecorder) PostSecure(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PostSecure", _s...)
}

func (_m *MockServiceCaller) Put(path string, bodyType string, body io.Reader, headers ...string) (*http.Response, error) {
	_s := []interface{}{path, bodyType, body}
	for _, _x := range headers {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Put", _s...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceCallerRecorder) Put(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", _s...)
}

func (_m *MockServiceCaller) PutSecure(path string, bodyType string, body io.Reader, headers ...string) (*http.Response, error) {
	_s := []interface{}{path, bodyType, body}
	for _, _x := range headers {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PutSecure", _s...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceCallerRecorder) PutSecure(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutSecure", _s...)
}

func (_m *MockServiceCaller) Patch(path string, bodyType string, body io.Reader, headers ...string) (*http.Response, error) {
	_s := []interface{}{path, bodyType, body}
	for _, _x := range headers {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Patch", _s...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceCallerRecorder) Patch(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Patch", _s...)
}

func (_m *MockServiceCaller) PatchSecure(path string, bodyType string, body io.Reader, headers ...string) (*http.Response, error) {
	_s := []interface{}{path, bodyType, body}
	for _, _x := range headers {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PatchSecure", _s...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceCallerRecorder) PatchSecure(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PatchSecure", _s...)
}

// Mock of BackendAdapter interface
type MockBackendAdapter struct {
	ctrl     *gomock.Controller
	recorder *_MockBackendAdapterRecorder
}

// Recorder for MockBackendAdapter (not exported)
type _MockBackendAdapterRecorder struct {
	mock *MockBackendAdapter
}

func NewMockBackendAdapter(ctrl *gomock.Controller) *MockBackendAdapter {
	mock := &MockBackendAdapter{ctrl: ctrl}
	mock.recorder = &_MockBackendAdapterRecorder{mock}
	return mock
}

func (_m *MockBackendAdapter) EXPECT() *_MockBackendAdapterRecorder {
	return _m.recorder
}

func (_m *MockBackendAdapter) Resolve(name string) (string, error) {
	ret := _m.ctrl.Call(_m, "Resolve", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBackendAdapterRecorder) Resolve(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resolve", arg0)
}

func (_m *MockBackendAdapter) Configure(services ...string) error {
	_s := []interface{}{}
	for _, _x := range services {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Configure", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBackendAdapterRecorder) Configure(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Configure", arg0...)
}

func (_m *MockBackendAdapter) Refresh() error {
	ret := _m.ctrl.Call(_m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBackendAdapterRecorder) Refresh() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Refresh")
}
